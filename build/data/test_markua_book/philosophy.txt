# Markua Origins and Philosophy

## What is Markua?

Markua, pronounced "mar-coo-ah", is a plain text format designed for the writing of books and documents.

Markua is intended to be extremely simple and powerful. We want Markua to be the best way in the world to write everything from a short story or a novel to a computer programming book, user manual or doctoral thesis.

The Markua specification specifies two things:

1. Markua syntax and mappings
2. Markua filename and directory structure conventions

## Markua Syntax in 2 Minutes

Before diving into the Markua specification, here's the 2 minute version.

The following is essentially enough information to write a novel in Markua syntax:

* Surround text with one asterisk (`*`) on each side to make it italic, and with two asterisks (`**`) on each side to make it bold.
* To make a heading, you start a line with some number of pound signs (`#`), followed by a space, followed by some words or numbers. Headings must be separated by blank lines.
* The type of heading is determined by the number of `#`s. There are 6 levels of headings: `#`, `##`, `###`, `####`, `#####` and `######`. In a normal book, `#` is chapter and `##` is section, but there's support for books to have parts as well, in which case `#` is part, `##` is chapter and `###` is section.

All the above syntax is inherited from Markdown as specified by John Gruber, and mapped to book and documentation concepts by Markua. This is deliberate: it is possible to write a novel in Markua using only syntax inherited directly from Markdown.

## Markua Syntax and Mappings

Every element of Markua syntax has two types of mappings defined:

1. a Conceptual Mapping
2. an HTML Mapping

The Conceptual Mapping maps the Markua syntax element to a book or document concept. These include concepts like part, chapter, section, footnote, etc.

The HTML Mapping maps the Markua syntax element to exactly specified HTML output. Together, the Conceptual Mappings and HTML mappings combine to mean that Markua-formatted text has both precisely-defined meaning and output.

The combination of the Conceptual Mapping and the HTML Mapping mean that Markua documents can be used to produce not just HTML output, but also PDF, EPUB and MOBI output--in other words, to generate books and documents. The EPUB and MOBI output is intended to be suitable for ebooks; the PDF output is intended to be suitable for either reading on computers or tablets or for producing a print book. Furthermore, some Markua Processors can also generate InDesign and other formats.

## Why There Is So Little Formatting Specified in Markua

Equally important to what is being specified in the Markua specification is what is **not** being specified. Markua does not specify things like the following:

* How large should a part, chapter or section heading be?
* What font should anything be in?
* What should be done about hyphenation, widows and orphans?
* Should there be page breaks between parts, sections, etc?

Markua ignores these concerns since they are not about meaning, but about formatting. Formatting is almost entirely omitted from Markua for the following reasons:

1. When you are writing, *formatting is procrastination*. Writing is hard enough without needing to worry about formatting.
2. For a high-quality print book, almost everything that a writer does to format a manuscript will need to be redone by a book designer, who typically will have to start by undoing all the formatting work that the writer did.
3. On mobile where there are typically no fixed page sizes, most formatting can be done to a sufficient level by an algorithm.
4. Separation of concerns: formatting should be specified as a series of rules, not intermixed with the text. This is what CSS got right.

Because of these reasons, the only formatting which is included in Markua is formatting which is important to the meaning of the writing. This includes things like bold, italics, etc. None of the formatting examples above have anything to do with the source text written by the author. (A book designer could make different decisions about all of the above, and it would not be considered changing the meaning of the text. However, this would not be true with, say, adding bold and italics in random places.)

There is another advantage to not specifying formatting in Markua: it encourages innovation on the behalf of designers of Markua books, whether those designers are individuals who are producing high-quality print books or whether those designers are creating templates for the automated generation of both ebooks and print books based on Markua documents. Markua is intended to contain enough degrees of freedom to allow for creativity and competition in these areas.

## Markua Origins in Markdown and Leanpub Flavoured Markdown

Markua is heavily inspired by Markdown.

Markdown is a plain text format for writing text which can be transformed by Markdown processors into HTML. Markdown was created by John Gruber, with help from Aaron Swartz. Markdown was [described](http://daringfireball.net/projects/markdown/) by John Gruber as follows:

> Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML).

The primary reason that Markdown is a great way to write is that it was designed to be this way. The design goal of Markdown is described by Gruber as follows:

> The overriding design goal for Markdown's formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it's been marked up with tags or formatting instructions. While Markdown's syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown's syntax is the format of plain text email.

Markua is being created by [Peter Armstrong](https://twitter.com/peterarmstrong), with help from [Scott Patten](https://twitter.com/scott_patten) and other contributors listed in the [Acknowledgments](#acknowledgments). Peter and Scott are the co-founders of Leanpub. At Leanpub, Peter and Scott created a dialect of Markdown called "Leanpub Flavoured Markdown". Leanpub Flavoured Markdown was basically Markdown minus inline HTML plus a number of extensions needed to write books. This Markdown dialect has been used for years by Leanpub authors to create all kinds of books.

After years of building and supporting Leanpub Flavoured Markdown, we set out to specify it properly. We originally thought that this is what Markua would be: just a formalization of Leanpub Flavoured Markdown.

However, Leanpub Flavoured Markdown is still complex. This is because Markdown as defined by John Gruber, while very simple to write in, contains a number of ambiguities. Also, in Markdown there are many ways to do some common things. There are two ways to create a top-level heading, and one of these ways has optional parts in it. (Heck, if you count inline HTML there are three ways.) Also, there are two ways to make bold text, two ways to make italic text, etc. This abundance of flexibility is in line with the TIMTOWTDI ("There Is More Than One Way To Do It") philosophy of Perl. This is not surprising, since Markdown was originally implemented by John Gruber as a Perl script.

So, if we were to specify Leanpub Flavoured Markdown, we would either need to formally specify all of Markdown or else reference other specification efforts such as vfmd or the more recent and somewhat controversial CommonMark effort. Furthermore, we'd have to formally specify all of our extensions, and do so in a way which was coherent with the specification of the core Markdown concepts. And we would need to do all of this in an entirely unambiguous way, in all cases. So, at the end of the day, we'd have created a specification which would be unpleasant to read and even worse to fully implement.

Even worse, by formally specifying Leanpub Flavoured Markdown this way, we'd have made things worse for our authors. We would have had to document and support the many different ways of doing common things, making getting started as an author more difficult. Also, the more complex the specification, the less likely it would be for there to be alternative feature-complete implementations.

So, we started over.

To create Markua, we started with Markdown.

We then removed everything which was not needed for books and documents.

We also removed or changed everything which was overly complex, either for authors using Markua to write books or documents or for software developers implementing Markua Processors.

We also made Markua strongly opinionated. In Markua, there is almost always only **one** correct way to do things. For example, there is exactly *one* way to define a top-level heading in Markua, exactly one way to make text bold and exactly one way to make text italic. This represents a philosophical difference with Markdown, and is more in line with the "opinionated software" approach of Ruby on Rails. (While John Gruber was a Perl developer, Peter Armstrong and Scott Patten built Leanpub in Rails.)

## Interoperability Between Markua and Markdown

Given the above, you may be tempted to think that Markua is as different from Markdown as, say, AsciiDoc.

This is not the case.

At its core, the simplest Markua documents are also legal Markdown documents.

If you write a novel in Markua, it's highly likely that your novel will only use Markua syntax which is also legal Markdown syntax. Furthermore, it's not just the syntax that would be the same: the meaning of the syntax would be the same, and mapping to HTML would be essentially the same.

You could caricature the subset of Markdown that is supported in Markua as the subset that Peter Armstrong could remember, and you wouldn't be far from the truth.

## A Note for Leanpub Authors

There are lots of changes in Markua from Leanpub Flavoured Markdown (or LFM).

The Markua spec is currently ahead of any implementation. We still need to implement this in Leanpub, and to create the Markua reference implementation.

{class: warning}
B> TODO - remove that when caught up!

We are going to be adding a one-click, optional "Convert my book to Markua" button in Leanpub. We're also going to keep support for Leanpub Flavoured Markdown for the foreseeable future.)

So, as you read this spec, don't worry about having to do a bunch of work converting your books: Leanpub will do this for you.

If you want to see a summary of notable changes, you can [see the appendix](#lfm-changes) where this is discussed.

## Design Goals of Markua

The following are the design goals of Markua:

1. Markua should be **extremely simple**. If you want to write a novel in Markua, you should be able to learn the Markua syntax that you need to know in 2 minutes. If you want to write a computer programming book or doctoral thesis in Markua, you should be able to learn the additional syntax you need in 5 minutes.
2. Markua should be **terse**. When you are writing using Markua, you should *feel like you are writing*, not programming. Once you understand Markua syntax it should fade into the background. Markua syntax should not clutter up text documents. Markua documents should look like plain text emails, not like programming language source code or like XML syntax. If you want to write a novel in Markua, all the formatting you need to know should fit (with explanations) on one 3x5 inch index card.
3. Markua should be **powerful**. Markua should be a suitable format to write a computer programming book or doctoral thesis in.
4. Markua should be **opinionated**. Wherever possible, there should be only one way to do something.
5. Markua must support **every human language supported in Unicode**.
6. Markua should have **almost no layout concepts**. Markua is a format for writers, not book designers. Our opinion is that when you are writing, *formatting is just procrastination*. Markua is not a format for producing books which have complex page layouts.
7. Markua should stay as close to **Markdown** as possible--*but no closer*. Specifically, the syntax that Markua uses should by default be Markdown syntax. However, not all Markdown syntax needs to be supported, and Markdown syntax can be changed to simplify or disambiguate where needed. By following this approach, text editors such as Emacs and iA Writer will support much of Markua in their existing Markdown modes.
8. Markua must not rely on formatting such as trailing whitespace which is automatically removed by some text editors.
9. Markua must specify an exact mapping to HTML. The Markua Specification should be accompanied by a test suite which can be used to test the mapping of Markua text to HTML. Compliant Markua Processors must generate identical HTML to what is in the test suite.
10. Markua should specify a coherent conceptual mapping from Markua-formatted text to book and documentation concepts.

## Markua Character Encoding

Markua documents MUST be saved in the **UTF-8** character encoding.

Note that ASCII text is a valid form of UTF-8, so for many western authors their favorite text editor already saves files as UTF-8 compliant text.

## Why the Name "Markua"?

When we set out to specify Leanpub Flavoured Markdown (which evolved into Markua), we realized we needed a name. We wanted a name that conveyed the warmth and love that we have for Markdown, for writing and for writers, while not implying endorsement by John Gruber in any way.

We did not want to claim that we were in any way a standard, canonical or official definition of Markdown. Recently, some well-intentioned implementers and users of Markdown parsers have produced a specification called [CommonMark](http://spec.commonmark.org/) which is more formally specified than Markdown as originally defined by John Gruber. This specification effort was initially overshadowed by the name choice: CommonMark was originally named Standard Markdown, then Standard Flavored Markdown, then Common Markdown, then CommonMark. We did not want a similar issue.

Furthermore, we wanted a name which did not reference Leanpub. We are creating Markua as a standalone specification with its own identity. We want this to be an open specification that anyone can implement, and not be perceived as something which is only specific to Leanpub. If we had called Markua "Leanpub Flavoured Markdown", this would not be apparent.  Furthermore, as discussed earlier, as we have evolved Markua it has diverged from the Leanpub Flavoured Markdown starting point.

Finally, Peter Armstrong was on vacation in Hawaii when he named Markua, and he wanted something that sounded happy, friendly and almost Hawaiian. (Yes, we are aware that there is no r in Hawaiian. Please accept r apologies.) He also wanted a name that had its .com domain name available, and that was short and spellable, for branding purposes. The Markua name does have all these these properties, and we feel it is a really good brand for what we're trying to accomplish.

## Why is Inline HTML Not Supported in Markua?

Inline HTML is not supported for both implementation and philosophical reasons.

Supporting inline HTML would be very hard to implement, as Markua and Markdown have different use cases. Markdown is a better way to write HTML; Markua is a better way to write books and documentation. Since Markdown's only output format target is HTML, there is a strong temptation to support inline HTML--generating HTML from HTML is as simple as passing the HTML through. From an implementation perspective, Markdown gets inline HTML support for free. On the other hand, for Markua, there is a large amount of HTML that makes no sense in books and documentation. Supporting inline HTML would put an undue burden on Markua Processors, the book and document production systems which produce PDF, EPUB, MOBI and HTML from Markua documents. Mapping all of HTML to PDF or MOBI formats in a meaningful way would be difficult and arbitrary.

Philosophically, Markua is intended to be a better way to write books and documentation. By not supporting inline HTML, Markua imposes more constraints on writers who would be tempted to use inline HTML for layout purposes. Since Markua does not support inline HTML, attempting to do complex layout in Markua is just not possible. And since it's not possible, the temptation to procrastinate by doing complex layout is not there.

Supporting inline HTML would make Markua a worse format, both to write in and to implement support for. So, it's not supported.

One design consequence of the support for inline HTML in Markdown is that the syntax can stay very small--authors can always fall back to using HTML. Since Markua does not support inline HTML, any required output must be produceable by a Markua syntax input. For example, there is no official table syntax in Markdown, and Markdown authors can just use inline HTML tables. Since Markua does not support inline HTML, and since books and documentation often require tables, Markua needs to add a table syntax.

## How this Specification is Structured

This specification defines:

1. Every element of Markua syntax.
2. The HTML Mapping of each element of Markua syntax to exactly specified HTML output.
3. The Conceptual Mapping from Markua syntax to book and/or documentation concepts.

In almost all cases, the Conceptual Mapping is identical for books and documents. For example, surrounding text with `**two asterisks**` means bold, and bold means bold, regardless of whether the Markua manuscript is producing a book or document. However, in the case of headings, there is some slight difference in the meaning of headings based on whether the Markua document is producing a book or document. When such differences in meaning exist, they will be explained.

Together, the HTML mappings and the Conceptual Mappings combine to mean that Markua-formatted text has both precisely-defined meaning and output.

## How Complete is the Markua Specification and Markua Implementations?

This is an in-progress, alpha quality specification. It is being constantly updated at <https://leanpub.com/markua>.

In the next few months we're going to publish an open source reference implementation of a Markua parser + HTML generation, along with an open source, minimalist, in-browser editor.

In terms of Markua support in Leanpub, currently Leanpub only supports Leanpub Flavoured Markdown (LFM). We are adding support for this version of the Markua specification to Leanpub. It will live alongside Leanpub Flavoured Markdown (LFM). Leanpub Flavoured Markdown will be the default for new books until this specification is at least at beta quality. At that point, we'll make Markua the default for new books, and provide a 1-click migration from LFM to Markua.

To stay current on Markua progress, follow [@markuadoc on Twitter](https://twitter.com/markuadoc).
