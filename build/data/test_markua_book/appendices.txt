# Appendices

## TODO

{class: warning}
B> TODO - Need to consider the following...

* Typographic symbols: Smart quotes, n-dash, m-dash, ellipses, etc?
* Images - Special attributes: width, float, etc?
* CriticMarkup support?
* It would be really nice to support linking to individual definition list items specifically, and to span elements in general.
* Support commenting out files in book.txt and sample.txt with #
* Centering text?
* Font sizes etc with CSS class?
* Should we have a book.css?
* lemma, theorem, etc -- typed figures

- extension attr!
- definition list linking yes
- table just table

- align on a heading
- align {left, center, right, justified} on any heading

## Title Pages

If a file called `title_page.png`, `title_page.jpg` or `title_page.jpeg` exists in the `images` directory, then it will be used as the title page of the book.

If more than one of these files exists, then the first one found alphabetically will be used.

{#lfm-changes}
## Important Changes From Leanpub Flavoured Markdown

There are lots of changes in Markua from Leanpub Flavoured Markdown (or LFM). The most notable changes are:

* manuscript.txt for single-file books / documents
* In multi-part-books, `#` is Part (not `-#`), `##` is Chapter (not `#`) and `###` is Section (not `##`). (In books without parts, which is the default in Markua, the behaviour is the same as in Leanpub Flavoured Markdown.
* There is only one type of bulleted list delimiter, the asterisk (`*`).
* In a numbered list, the number that begins the list is the number that begins the list in the output (as opposed to the output always starting with 1).
* In a numbered list, numbers must be consecutive. You're not allowed to start every entry with `1.`.
* There's no support for indented code blocks.
* There is no support for comments (which are not output) in a Markua document.

### Syntax for inline ids

Inline IDs:

```
This is `a code span`{#foo}
This is a word{#word}.
This is a *nice thingy here*{#thingy}
This is a *nice thingy{#thingy} here*
```

will result in

```
This is <code id='foo'>a code span</code>
This is a <span id='word'>word</word>.
This is a <em id='thingy'>nice thingy here</em>
This is a <em>nice <span id='thingy'>thingy</span> here</em>
```

I.e. it attaches it the the previous span or word.

### Syntax for index entries

~~~
a b c {i:C} d e

...

a b c{i:C} d e
~~~

results in:

~~~
a b <span id="__i__1__C">c</span> d e

...

a b <span id="__i__2_C">c</span> d e
~~~

spec: defining an index entry attaches it to prev word or to the next block.

The id will be `__i__<number>__<index>`. Where `index` is everything inside of the curly braces after `i:` and before the `|`, with `*` replaced with nothing and `!` replaced with `__`.

Question: Is the index lowercased? I.e. are `{i:C}` and `{i:c}` distinct? I think they are not distinct, so we should lowercase the index.

index = (The thing inside the curly braces after `i:`).split(/\|/).first.gsub(/\!/, '__').gsub(/\*/, '').lower

`number` is the number of times `index` has been indexed in the document already, counting from 1.


